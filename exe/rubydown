#! /usr/bin/env ruby

require 'kramdown'
require 'erb'
require 'stringio'
require 'base64'
require 'optparse'
require 'listen'

require 'rubydown'

def get_context
  binding
end

class EvalDoc < Kramdown::Document
  attr_accessor :context, :stdout
  attr_reader :javascripts

  def initialize(text, *opts)
    super(text, *opts)

    @javascripts = {}
    self.context = get_context
    self.root = scan_el(self.root)
    @exception_raised = false
  end

  REQUIREJS_SCRIPT_TAG = '<script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js"></script>'
  MATHJAX_SCRIPT_TAG = "<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML' async></script>"

  private
  def scan_el(el)
    @javascripts[:mathjax] ||= MATHJAX_SCRIPT_TAG if el.type == :math

    new_children = []
    el.children.each do |child_el|
      child_el = scan_el(child_el)
      new_children << child_el

      is_code = child_el.type == :codeblock || child_el.type == :codespan

      if is_code && child_el.options[:lang] == 'ruby'
        code = child_el.value.gsub(/^ *ruby *\n/, '')
        new_children << eval_and_elementize(code) unless @exception_raised
        @javascripts[:requirejs] ||= REQUIREJS_SCRIPT_TAG
      end
    end

    el.children = new_children

    return el
  end

  def eval_and_elementize(code)
    stdout = StringIO.new

    $stdout = stdout
    eval_result = begin
      self.context.eval(code)
    rescue Exception => e
      @exception_raised = true
      e
    end
    $stdout = STDOUT

    stdout_string = stdout.string.empty? ? '' : stdout.string + "\n"

    case
    when eval_result.is_a?(Exception)
      text_result_el(eval_result.inspect)
    when eval_result.respond_to?(:to_html)
      Kramdown::Document.new(eval_result.to_html, input: :html).root
    when eval_result.instance_of?(File) && File.extname(eval_result.path) == ".png"
      img_b64 = Base64.encode64(File.binread(eval_result.path))
      Kramdown::Document.new("<img src='data:image/png;base64,#{img_b64}' />", input: :html).root
    else
      text_result_el(stdout_string + "=> #{eval_result}")
    end
  end

  def text_result_el(text)
    text_el = Kramdown::Element.new(:codeblock, text)
    p_el = Kramdown::Element.new(:p)
    p_el.children << text_el
    p_el
  end
end

def main # to separate binding

  options = {}
  options[:erb] = File.expand_path('../../templates/template.html.erb', __FILE__)
  option_parser = OptionParser.new do |opts|
    opts.on("-i INPUT", "Input form the file") do |input|
      options[:input] = input
    end
    opts.on("--watch", "Watch file") do
      options[:watch] = true
    end
    opts.on("-e ERB", "Specify template file") do |erb|
      options[:erb] = erb
    end
    opts.on("-o OUTPUT", "Output html to OUTPUT") do |output|
      options[:output] = output
    end
    opts.on("-h", "--help", "Prints this help") do
      puts opts
      exit
    end
    opts.on_tail("--version", "Show version") do
      puts Rubydown::VERSION
      exit
    end
  end

  option_parser.parse!
  # puts options.inspect
  # puts options[:input]
  # puts options[:erb]
  # puts options[:output]

  case options[:input]
  when /\.md\z/i
    options[:output] ||= options[:input].sub(/\.md\z/i, '.html')
  when /./
    abort("Input file must be markdown (*.md)")
  else
    abort(option_parser.help)
  end

  if options[:watch]
    doc = EvalDoc.new(File.read(options[:input], encoding: 'utf-8')) # using in ERB
    File.write(options[:output], ERB.new(File.read(options[:erb])).result(binding))

    listener = Listen.to(File.dirname(options[:input])) do |modifieds, _, _|
      if modifieds.any? { |modified| modified == File.absolute_path(options[:input]) }
        doc = EvalDoc.new(File.read(options[:input], encoding: 'utf-8')) # using in ERB
        File.write(options[:output], ERB.new(File.read(options[:erb])).result(binding))  
      end
    end
    listener.start
    sleep
  else
    doc = EvalDoc.new(File.read(options[:input], encoding: 'utf-8')) # using in ERB
    File.write(options[:output], ERB.new(File.read(options[:erb])).result(binding))
  end
#  puts ERB.new(File.read(options[:erb])).result(binding)
end

main
